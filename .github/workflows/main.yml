version: '3.8'

# This Docker Compose file sets up the development environment for the FLATS UG application.
# It consists of three main services: a frontend React app, a backend Node.js API, and a MySQL database.
#
# To run this setup:
# 1. Make sure you have Docker and Docker Compose installed.
# 2. Run `docker-compose up --build` in your terminal from the project root.
#
# Access URLs:
# - Frontend Application: http://localhost:3000
# - Backend API: http://localhost:5001

services:
  # Database Service (MySQL)
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: flats_ug_db
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbpassword
    ports:
      - "3306:3306" # Exposes the DB port to the host machine for direct access if needed
    volumes:
      - db_data:/var/lib/mysql # Persists database data across container restarts
    networks:
      - flats-app-network

  # Backend Service (Node.js/Express API)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/usr/src/app # Mounts local backend code into the container for live updates
      - /usr/src/app/node_modules # Prevents local node_modules from overwriting container's
    depends_on:
      - db # Ensures the database is started before the backend
    environment:
      - DB_HOST=db
      - DB_USER=dbuser
      - DB_PASSWORD=dbpassword
      - DB_NAME=flats_ug_db
      - DB_PORT=3306
      - JWT_SECRET=a_secure_secret_key_for_development
      - PORT=5001
    networks:
      - flats-app-network

  # Frontend Service (React App)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./:/app # Mounts the entire project root for access to frontend files
      - /app/node_modules # Anonymouse volume for node_modules
      - /app/backend # Anonymous volume to hide the backend folder inside the frontend container
    depends_on:
      - backend # Ensures the backend is ready before the frontend starts
    networks:
      - flats-app-network

# Volumes definition for data persistence
volumes:
  db_data:

# Network definition for service communication
networks:
  flats-app-network:
    driver: bridge
